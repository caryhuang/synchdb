name: SynchDB CI
on:
  workflow_dispatch:
  push:
    branches: [ main, synchdb-devel, github-action-test]
  pull_request:
    branches: [ main, synchdb-devel github-action-test]
jobs:
  params:
    runs-on: ubuntu-22.04
    name: Initialize parameters
    outputs:
      pg16_version: '{ "major": "16", "full": "16.8" }'
      pg17_version: '{ "major": "17", "full": "17.4" }'
    steps:
      - name: set up parameters
        run: echo 'noop'
  build:
    needs: params
    name: Build for PG${{ fromJson(matrix.pg_version).major }}
    strategy:
      matrix:
        pg_version:
          - ${{ needs.params.outputs.pg16_version }}
          - ${{ needs.params.outputs.pg17_version }}
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 22
      uses: actions/setup-java@v2
      with:
        java-version: '22'
        distribution: 'temurin'
        architecture: x64
        check-latest: true
    - name: Set up Maven
      uses: stCarolas/setup-maven@v4.5
      with:
        maven-version: 3.9.8
    - name: Install pg
      run: |
        sudo apt-get update
        echo -ne "\n" | sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh
        sudo apt-get install -y postgresql-client-${{ fromJson(matrix.pg_version).major }}
        sudo apt-get install -y postgresql-${{ fromJson(matrix.pg_version).major }}
        sudo apt-get install -y postgresql-server-dev-${{ fromJson(matrix.pg_version).major }}
    - name: Expose $PG_MAJOR to Github Env
      run: echo "PG_MAJOR=$(echo '${{ matrix.pg_version }}' | jq -r .major)" >> $GITHUB_ENV
      shell: bash
    - name: Build
      run: "./ci/build-synchdb.sh"
      shell: bash
    - uses: actions/upload-artifact@v4
      with:
        name: synchdb-install-${{ env.PG_MAJOR }}
        path: |-
          ./synchdb-install-${{ fromJson(matrix.pg_version).major }}.tar.gz
  test-synchdb:
    name: PG${{ fromJson(matrix.pg_version).major }} - MySQL Tests
    strategy:
      matrix:
        pg_version:
          - ${{ needs.params.outputs.pg16_version }}
          - ${{ needs.params.outputs.pg17_version }}
    runs-on: ubuntu-22.04
    needs:
    - params
    - build
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v4
      with:
        name: synchdb-install-${{ fromJson(matrix.pg_version).major }}
    - name: Set up JDK 22
      uses: actions/setup-java@v2
      with:
        java-version: '22'
        distribution: 'temurin'
        architecture: x64
        check-latest: true
    - name: Configure linker
      run: |
        echo "configure Java"
        JAVA_PATH=$(which java)
        JDK_HOME_PATH=$(readlink -f ${JAVA_PATH} | sed 's:/bin/java::')
        JDK_LIB_PATH=${JDK_HOME_PATH}/lib
        echo $JDK_LIB_PATH | sudo tee -a /etc/ld.so.conf.d/x86_64-linux-gnu.conf
        echo $JDK_LIB_PATH/server | sudo tee -a /etc/ld.so.conf.d/x86_64-linux-gnu.conf
        sudo ldconfig
    - name: Install pg and synchdb
      run: |
        sudo apt-get update
        echo -ne "\n" | sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh
        sudo apt-get install -y postgresql-client-${{ fromJson(matrix.pg_version).major }}
        sudo apt-get install -y postgresql-${{ fromJson(matrix.pg_version).major }}
        sudo tar xzvf synchdb-install-${{ fromJson(matrix.pg_version).major }}.tar.gz -C /
    - name: Set up test environment
      run: |
        sudo apt-get install -y docker-compose
        echo "Docker Compose version:"
        docker-compose --version
        echo "Starting MySQL container..."
        docker-compose -f testenv/mysql/synchdb-mysql-test.yaml up -d
        echo "Starting SQL Server container..."
        docker-compose -f testenv/sqlserver/synchdb-sqlserver-test.yaml up -d
        echo "Waiting for containers to be ready..."
        sleep 20  # Give containers time to fully start
        echo "Docker container status:"
        docker ps -a
        echo "Docker logs for MySQL:"
        docker logs mysql || echo "No MySQL container found"
        id=$(docker ps | grep sqlserver | awk '{print $1}')
        export PATH=$PATH:/usr/lib/postgresql/${{ fromJson(matrix.pg_version).major }}/bin
        mkdir -p /var/run/postgresql
        sudo chown -R $(whoami) /var/run/postgresql
        echo "Initializing database:"
        initdb -D synchdbtest
        echo "Configuring PostgreSQL:"
        echo "max_connections = 100" >> synchdbtest/postgresql.conf
        echo "shared_buffers = 128MB" >> synchdbtest/postgresql.conf
        echo "dynamic_shared_memory_type = posix" >> synchdbtest/postgresql.conf
        echo "Starting PostgreSQL @ $PWD:"
        pg_ctl -D synchdbtest start
        echo "PostgreSQL status:"
        pg_ctl -D synchdbtest status
    - name: Prepare MySQL test database
      run: |
        echo "MySQL container status:"
        docker ps | grep mysql
        echo "Attempting to connect to MySQL..."
        docker exec -i mysql mysql -uroot -pmysqlpwdroot -e "SELECT VERSION();" || { echo "Failed to connect to MySQL"; docker logs mysql; exit 1; }
        docker exec -i mysql mysql -uroot -pmysqlpwdroot << EOF
        GRANT replication client ON *.* TO mysqluser;
        GRANT replication slave ON *.* TO mysqluser;
        GRANT RELOAD ON *.* TO 'mysqluser'@'%';
        FLUSH PRIVILEGES;
        EOF
        echo "Showing grants for mysqluser:"
        docker exec -i mysql mysql -uroot -pmysqlpwdroot -e "SHOW GRANTS FOR mysqluser;"
    - name: Prepare SQL Server test database
      run: |
        docker ps
        id=$(docker ps | grep sqlserver | awk '{print $1}')
        echo "copy inventory SQL "
        docker cp postgres/contrib/synchdb/inventory.sql $id:/
        echo "SQL Server logs:"
        docker logs $id
        echo "Attempting to connect to SQL Server without SSL verification:"
        docker exec -i $id /opt/mssql-tools18/bin/sqlcmd -U sa -P 'Password!' -C -Q "SELECT @@VERSION"
        echo "Executing inventory.sql:"
        docker exec -i $id /opt/mssql-tools18/bin/sqlcmd -U sa -P 'Password!' -C -i /inventory.sql
        echo "Checking orders table:"
        docker exec -i $id /opt/mssql-tools18/bin/sqlcmd -U sa -P 'Password!' -C -d testDB -Q "SELECT COUNT(*) from orders"        
    - name: Test synchdb MySQL
      run: |
        psql -d postgres -c "CREATE EXTENSION synchdb CASCADE;" || { echo "synchdb installation failed"; exit 1; }
        psql -d postgres << EOF || { echo "Failed to create connections or start connectors"; cat logfile; exit 1; }
        SELECT synchdb_add_conninfo('mysqlconn', '127.0.0.1', 3306, 'mysqluser', 'mysqlpwd', 'inventory', 'postgres', '', 'mysql');
        SELECT synchdb_add_conninfo('sqlserverconn', '127.0.0.1', 1433, 'sa', 'Password!', 'testDB', 'postgres', '', 'sqlserver');
        SELECT synchdb_start_engine_bgw('mysqlconn');
        SELECT synchdb_start_engine_bgw('sqlserverconn');
        EOF
    - name: View connector states and validate
      run: |
        max_attempts=10
        attempt=1
        docker ps
        id=$(docker ps | grep sqlserver | awk '{print $1}')
        
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt of $max_attempts"
          # Debug: Print raw output
          echo "Raw SQL Server output:"
          docker exec -i $id /opt/mssql-tools18/bin/sqlcmd -U sa -P 'Password!' -d testDB -C -Q "SELECT COUNT(*) from orders" -h -1

          # Check if the table exists in PostgreSQL
          table_exists=$(psql -d test_db -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'testdb' AND table_name = 'orders';" | tr -d ' \n')
          
          echo "SQL Server count: ['$syncing_src_count']"
          echo "Table exists in PostgreSQL: $table_exists"
          
          if [ "$table_exists" -eq "0" ]; then
            echo "The 'orders' table doesn't exist in PostgreSQL yet. Waiting for replication..."
            sleep 10  # Increased wait time
            attempt=$((attempt+1))
            continue
          fi
      
          echo "Raw PostgreSQL output:"
          psql -d test_db -t -c "SELECT COUNT(*) from testDB.orders;"
          
          # Capture and clean the outputs
          syncing_src_count=$(docker exec -i $id /opt/mssql-tools18/bin/sqlcmd -U sa -P 'Password!' -d testDB -C -Q "SELECT COUNT(*) from orders" -h -1 | sed -n '1p' | tr -d ' \r\n')
          syncing_dst_count=$(psql -d test_db -t -c "SELECT COUNT(*) from testDB.orders;" | tr -d ' \n')

          # Debug: Print cleaned variables
          echo "Cleaned src_count: ['$syncing_src_count']"
          echo "Cleaned dst_count: ['$syncing_dst_count']"
      
          if [ "$syncing_src_count" -eq "$syncing_dst_count" ]; then
            echo "Initial sync complete. Adding new record to source."
            docker exec -i $id /opt/mssql-tools18/bin/sqlcmd -U sa -P 'Password!' -d testDB -C -Q "INSERT INTO orders(order_date, purchaser, quantity, product_id) VALUES ('2024-01-01', 1003, 2, 107)"
            
            inner_max_attempts=10
            inner_attempt=1
            while [ $inner_attempt -le $inner_max_attempts ]; do
              echo "Attempt $inner_attempt of $inner_max_attempts for new record sync"
              new_syncing_src_count=$(docker exec -i $id /opt/mssql-tools18/bin/sqlcmd -U sa -P 'Password!' -d testDB -C -Q "SELECT COUNT(*) from orders" -h -1 | sed -n '1p' | tr -d ' \r\n')
              new_syncing_dst_count=$(psql -d test_db -t -c "SELECT COUNT(*) from testDB.orders;" | tr -d ' \n')
              
              echo "New src_count: ['$new_syncing_src_count']"
              echo "New dst_count: ['$new_syncing_dst_count']"
              
              if [ "$new_syncing_dst_count" -eq "$new_syncing_src_count" ]; then
                echo "Both connectors are in syncing state"
                psql -d test_db -c "SELECT * FROM synchdb_state_view;"
                exit 0
              else
                echo "Waiting for last record to sync (current count: $new_syncing_dst_count vs $new_syncing_src_count)"
                sleep 10
              fi
              inner_attempt=$((inner_attempt+1))
            done
            
            echo "Timeout: Last record did not sync"
            exit 1
          else
            echo "Waiting for initial sync (current count: $syncing_dst_count vs $syncing_src_count)"
            sleep 10
          fi
          attempt=$((attempt+1))
        done
        
        echo "Timeout: Initial sync did not complete"
        psql -d test_db -c "SELECT * FROM synchdb_state_view;"
        exit 1

      shell: bash
